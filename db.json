{
  "products": [
    {
      "id": 1,
      "name": "Classico 4",
      "img": "http://mauweb.monamedia.net/donghohaitrieu/wp-content/uploads/2019/07/product-05.png",
      "price": 500000,
      "status": true
    },
    {
      "id": 2,
      "name": "Classico 3",
      "img": "http://mauweb.monamedia.net/donghohaitrieu/wp-content/uploads/2019/07/product-04.png",
      "price": 700000,
      "status": true
    },
    {
      "id": 3,
      "name": "Classico 2",
      "img": "http://mauweb.monamedia.net/donghohaitrieu/wp-content/uploads/2019/07/product-03.png",
      "price": 700000,
      "status": true
    },
    {
      "name": "Classico 1",
      "img": "http://mauweb.monamedia.net/donghohaitrieu/wp-content/uploads/2019/07/product-02.png",
      "price": 700000,
      "status": true,
      "id": 4
    }
  ],
  "posts": [
    {
      "id": 1,
      "name": "Chiếc đồng hồ của những CEO quyền lực nhất thế giới",
      "img": "http://mauweb.monamedia.net/donghohaitrieu/wp-content/uploads/2019/07/new-4.jpg",
      "desc": "Đối với một số doanh nhân, một chiếc đồng hồ đeo tay không chỉ là ..."
    },
    {
      "id": 2,
      "name": "12 chiếc đồng hồ dành cho nữ giới đắt giá nhất mọi thời đại",
      "img": "http://mauweb.monamedia.net/donghohaitrieu/wp-content/uploads/2019/07/trend-2.jpg",
      "desc": "Công nghiệp sản xuất đồng hồ sang trọng có dấu hiệu chững lại trong hai ..."
    },
    {
      "id": 3,
      "name": "10 thương hiệu đồng hồ cao cấp hàng đầu mọi quý ông đều quan tâm, Rolex",
      "img": "http://mauweb.monamedia.net/donghohaitrieu/wp-content/uploads/2019/07/new-3.jpg",
      "desc": "1. Audemars Piguet Được thành lập vào năm 1875 bởi Jules-Louis Audemars và Edward-Auguste Piguet, ..."
    }
  ],
  "users": [
    {
      "email": "admin@gmail.com",
      "password": "$2a$10$yxPMrWJwTrUaf8nD9addge9OTH58g3osTj99E.tv8FT3t/rc5kmBi",
      "username": "Le Dinh",
      "role": 1,
      "id": 1
    },
    {
      "email": "dinhlcph18273@gmail.com",
      "password": "$2a$10$wihAsOQWwEJ9uBUPubWk8OFLSwefNaeQGMn4dNED9ad6rCnEksW62",
      "username": "Le Dinh",
      "role": 0,
      "id": 2
    }
  ],
  "projects":[
    {
      "id":1,
      "title": "Happy Trade",
      "img":"https://scontent.xx.fbcdn.net/v/t1.15752-9/287044886_3284569565158655_2964744814067876534_n.png?stp=dst-png_s640x640&_nc_cat=102&ccb=1-7&_nc_sid=aee45a&_nc_ohc=tk9aSDsmW-YAX9qs9t8&_nc_ad=z-m&_nc_cid=0&_nc_ht=scontent.xx&oh=03_AVKfn-P6LLvhFliXHXdQj1c2lzbFBIJ0820EVvkiaUPPNQ&oe=62CD1C42",
      "year": "2020",
      "category": "Dashboard",
      "desc": "Amet minim mollit non deserunt ullamco est sit aliqua dolor do amet sint. Velit officia consequat duis enim velit mollit. Exercitation veniam consequat sunt nostrud amet."
    },
    {
      "id":2,
      "title": "Portfolio",
      "img":"https://scontent.xx.fbcdn.net/v/t1.15752-9/285306640_365955078994552_4088306939285821609_n.png?stp=dst-png_p403x403&_nc_cat=104&ccb=1-7&_nc_sid=aee45a&_nc_ohc=D5kxbgxpUZoAX-Xa1OO&_nc_ad=z-m&_nc_cid=0&_nc_ht=scontent.xx&oh=03_AVJggoNVxX1sAnCwS0fVY4psP7GwJabj1ebCjrcEjJjTzQ&oe=62CEF757",
      "year": "2018",
      "category": "Illustration",
      "desc": "Amet minim mollit non deserunt ullamco est sit aliqua dolor do amet sint. Velit officia consequat duis enim velit mollit. Exercitation veniam consequat sunt nostrud amet."
    },
    {
      "id":3,
      "title": "Mona Watch",
      "img":"https://scontent.xx.fbcdn.net/v/t1.15752-9/287694642_1372757269870546_1474137581777902779_n.png?stp=dst-png_p403x403&_nc_cat=109&ccb=1-7&_nc_sid=aee45a&_nc_ohc=Ao7k-qNadR8AX-P91BV&_nc_ad=z-m&_nc_cid=0&_nc_ht=scontent.xx&oh=03_AVIS1tmTzulodAscmA85sUjUIHjv8VBM-m8-pqTDPXpZgA&oe=62CF6C48",
      "year": "2018",
      "category": "Typography",
      "desc": "Amet minim mollit non deserunt ullamco est sit aliqua dolor do amet sint. Velit officia consequat duis enim velit mollit. Exercitation veniam consequat sunt nostrud amet."
    }
  ],
  "blogs": [
    {
      "id": 1,
      "title": "Let’s Create a Tiny Programming Language",
      "subTitle": "DigitalOcean joining forces with CSS-Tricks! Special welcome offer: get $100 of free credit.",
      "content": "<p>By now, you are probably familiar with one or more programming languages. <strong>But have you ever wondered how you could create your own programming language?</strong> And by that, I mean:</p><blockquote><p><i>A programming language is any set of rules that convert strings to various kinds of machine code output.</i></p></blockquote><p>In short, a programming language is just a set of predefined rules. And to make them useful, you need something that understands those rules. And those things are <i>compilers</i>, <i>interpreters</i>, etc. So we can simply define some rules, then, to make it work, we can use any existing programming language to make a program that can understand those rules, which will be our interpreter.</p><h3><strong>Compiler</strong></h3><p>A compiler converts codes into machine code that the processor can execute (e.g. C++ compiler).</p><h3><strong>Interpreter</strong></h3><p>An interpreter goes through the program line by line and executes each command.</p><p>Want to give it a try? Let’s create a super simple programming language together that outputs magenta-colored output in the console. We’ll call it <strong>Magenta</strong>.</p><p>&nbsp;</p><p>&nbsp;</p><p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/s_202E5FF9B61E1911DBB7D9A33C31EAF25C613502CB267B4C9FC3E5DDF63D6AF9_1644233769692_OnPaste.20220207-173602.png?resize=592%2C302&amp;ssl=1\" alt=\"Screenshot of terminal output in color magenta.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/s_202E5FF9B61E1911DBB7D9A33C31EAF25C613502CB267B4C9FC3E5DDF63D6AF9_1644233769692_OnPaste.20220207-173602.png?w=592&amp;ssl=1 592w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/s_202E5FF9B61E1911DBB7D9A33C31EAF25C613502CB267B4C9FC3E5DDF63D6AF9_1644233769692_OnPaste.20220207-173602.png?resize=300%2C153&amp;ssl=1 300w\" sizes=\"100vw\" width=\"592\"></p><p>&nbsp;</p><p>&nbsp;</p><p>Our simple programming language creates a codes variable that contains text that gets printed to the console… in magenta, of course.</p><h3><strong>Setting up our programming language</strong></h3><p>I am going to use Node.js but you can use any language to follow along, the concept will remain the same. Let me start by creating an index.js file and set things up.</p><p>class Magenta { &nbsp;constructor(codes) { &nbsp; &nbsp;this.codes = codes &nbsp;} &nbsp;run() { &nbsp; &nbsp;console.log(this.codes) &nbsp;} } <i>// For now, we are storing codes in a string variable called `codes`</i> <i>// Later, we will read codes from a file</i> const codes = `print \"hello world\" print \"hello again\"` const magenta = new Magenta(codes) magenta.run()</p><p>What we’re doing here is declaring a class called Magenta. That class defines and initiates an object that is responsible for logging text to the console with whatever text we provide it via a codes variable. And, for the time being, we’ve defined that codes variable directly in the file with a couple of “hello” messages.</p><p>&nbsp;</p><p>&nbsp;</p><p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/s_202E5FF9B61E1911DBB7D9A33C31EAF25C613502CB267B4C9FC3E5DDF63D6AF9_1644228498784_OnPaste.20220207-160729.png?resize=556%2C271&amp;ssl=1\" alt=\"Screenshot of terminal output.\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/s_202E5FF9B61E1911DBB7D9A33C31EAF25C613502CB267B4C9FC3E5DDF63D6AF9_1644228498784_OnPaste.20220207-160729.png?w=556&amp;ssl=1 556w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2022/05/s_202E5FF9B61E1911DBB7D9A33C31EAF25C613502CB267B4C9FC3E5DDF63D6AF9_1644228498784_OnPaste.20220207-160729.png?resize=300%2C146&amp;ssl=1 300w\" sizes=\"100vw\" width=\"556\"></p><p>&nbsp;</p><p>&nbsp;</p><p>If we were to run this code we would get the text stored in codes logged in the console.</p><p>OK, now we need to create a what’s called a Lexer.</p>",
      "category": "Coder",
      "createAt": "Sun Jun 12 2022 04:51:13 GMT+0700 (Giờ Đông Dương)"
    },
    {
      "id": 2,
      "title": "Adding Custom GitHub Badges to Your Repo",
      "subTitle": "If you’ve spent time looking at open-source repos on GitHub, you’ve probably noticed that most of them use badges in their README files. Take the official React repository, for instance. There are GitHub badges all over the README file that communicate important dynamic info, like the latest released version and whether the current build is passing.",
      "content": "<h3><strong>Badgen + Napkin</strong></h3><p>There’s plenty of ways to get your own HTTPS endpoint. You could spin up a server with DigitalOcean or AWS EC2, or you could use a serverless option like Google Cloud Functions or AWS Lambda; however, those can all still become a bit complex and tedious for our simple use case. That’s why I’m suggesting <a href=\"https://www.napkin.io/sandbox\">Napkin’s in-browser function editor</a> to code and deploy an endpoint without any installs or configuration.</p><p><a href=\"https://napkin.io/examples/bitcoin-badge\">Head over to Napkin’s Bitcoin badge example</a> to see an example endpoint. You can see the code to retrieve the current Bitcoin price and return it as JSON in the editor. You can run the code yourself from the editor or directly use the endpoint.</p><p>&nbsp;</p><p>&nbsp;</p><figure class=\"image\"><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/image-9.png?resize=695%2C659&amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/image-9.png?w=695&amp;ssl=1 695w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/image-9.png?resize=300%2C284&amp;ssl=1 300w\" sizes=\"100vw\" width=\"695\"></figure><p>&nbsp;</p><p>&nbsp;</p><p>To use the endpoint with Badgen, work with the same URL scheme from above, only this time with the Napkin endpoint:</p><p>https://badgen.net/https/napkin-examples.npkn.net/bitcoin-badge</p>",
      "category": "Trick-Css",
      "createAt": "Sun Jun 12 2022 04:54:28 GMT+0700 (Giờ Đông Dương)"
    },
    {
      "id": 3,
      "title": "Here’s why the columns aren’t equal",
      "subTitle": "Going back to our design scenario where we need three equal columns beneath a hero, we saw that the columns aren’t equal widths. That’s because flexbox starts by looking at the content size of each flex item before even thinking about shrinking them.",
      "content": "<blockquote><h3><strong>Here’s why the columns aren’t equal</strong></h3></blockquote><p>Going back to our design scenario where we need three equal columns beneath a hero, we saw that the columns aren’t equal widths. That’s because flexbox starts by looking at the content size of each flex item before even thinking about shrinking them.</p><blockquote><p>&nbsp;</p><p>&nbsp;</p><p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622214548746_image.png?resize=425%2C353&amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622214548746_image.png?w=850&amp;ssl=1 850w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622214548746_image.png?resize=300%2C249&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622214548746_image.png?resize=768%2C637&amp;ssl=1 768w\" sizes=\"100vw\" width=\"425\"></p><p>&nbsp;</p><p>&nbsp;</p><p>Using Firefox’s DevTools (because it’s got some unique flexbox visualizations that others don’t), we can actually see how flexbox is calculating everything.</p><p>For simplicity’s sake, as we dive deeper into this, let’s work with some nice round numbers. We can do this by declaring widths on our flex items. <strong>When we declare a width on a flex item, we throw that intrinsic size out the window, as we’ve now declared an explicit value instead</strong>. This makes figuring out what’s really going on a lot easier.</p><p>In the Pen below, we have a parent that’s a 600px wide flexible container (display: flex). I’ve removed anything that might influence the numbers, so no gap or padding. I’ve also switched out the border for an outline so we can still visualize everything easily.</p><p>&nbsp;</p><p>The first and third flex items have a width: 300px and the middle one a width: 600px. If we add that all up, it’s a total of 1200px. That’s bigger than the the 600px available within the parent, so flex-shrink kicks in.</p><p>flex-shrink is a ratio. If everything has the same flex-shrink (which is 1 by default), they all shrink at the same rate. <strong>That doesn’t mean they all shrink to the same size or by the same amount</strong>, but they all shrink at the same rate.</p><p>If we jump back into Firefox DevTools, we can see the base size, the flex-shrink and the final size. In this case, the two 300px elements are now 150px, and the 600px one is now 300px.</p><p>&nbsp;</p><p>&nbsp;</p><p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215047836_image-1.png?resize=849%2C710&amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215047836_image-1.png?w=849&amp;ssl=1 849w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215047836_image-1.png?resize=300%2C251&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215047836_image-1.png?resize=768%2C642&amp;ssl=1 768w\" sizes=\"100vw\" width=\"849\">The two elements that have a base width of&nbsp;300px&nbsp;become&nbsp;150px.</p><p>&nbsp;</p><p>&nbsp;</p><p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215064744_image.png?resize=846%2C698&amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215064744_image.png?w=846&amp;ssl=1 846w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215064744_image.png?resize=300%2C248&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215064744_image.png?resize=768%2C634&amp;ssl=1 768w\" sizes=\"100vw\" width=\"846\"></p><p>&nbsp;</p><p>The larger element with a base width of&nbsp;600px&nbsp;becomes&nbsp;300px.</p><p>If we add up all the base sizes of all three flex items (the actual widths we declared on them), the total comes out to 1200px. Our flex container is 600px wide. If we divide everything by 2, it fits! <strong>They are all shrinking by the same rate, dividing their own widths by 2</strong>.</p><p>It’s not often that we have nice round numbers like that in the real world, but I think this does a nice job illustrating how flexbox does what it does when figuring out how big to make things.</p></blockquote>",
      "category": "Flex -Column",
      "createAt": "Sun Jun 12 2022 04:58:08 GMT+0700 (Giờ Đông Dương)"
    },
    {
      "id": 4,
      "title": "Here’s why the columns aren’t equal",
      "subTitle": "Going back to our design scenario where we need three equal columns beneath a hero, we saw that the columns aren’t equal widths. That’s because flexbox starts by looking at the content size of each flex item before even thinking about shrinking them.",
      "content": "<blockquote><h3><strong>Here’s why the columns aren’t equal</strong></h3></blockquote><p>Going back to our design scenario where we need three equal columns beneath a hero, we saw that the columns aren’t equal widths. That’s because flexbox starts by looking at the content size of each flex item before even thinking about shrinking them.</p><blockquote><p>&nbsp;</p><p>&nbsp;</p><p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622214548746_image.png?resize=425%2C353&amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622214548746_image.png?w=850&amp;ssl=1 850w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622214548746_image.png?resize=300%2C249&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622214548746_image.png?resize=768%2C637&amp;ssl=1 768w\" sizes=\"100vw\" width=\"425\"></p><p>&nbsp;</p><p>&nbsp;</p><p>Using Firefox’s DevTools (because it’s got some unique flexbox visualizations that others don’t), we can actually see how flexbox is calculating everything.</p><p>For simplicity’s sake, as we dive deeper into this, let’s work with some nice round numbers. We can do this by declaring widths on our flex items. <strong>When we declare a width on a flex item, we throw that intrinsic size out the window, as we’ve now declared an explicit value instead</strong>. This makes figuring out what’s really going on a lot easier.</p><p>In the Pen below, we have a parent that’s a 600px wide flexible container (display: flex). I’ve removed anything that might influence the numbers, so no gap or padding. I’ve also switched out the border for an outline so we can still visualize everything easily.</p><p>&nbsp;</p><p>The first and third flex items have a width: 300px and the middle one a width: 600px. If we add that all up, it’s a total of 1200px. That’s bigger than the the 600px available within the parent, so flex-shrink kicks in.</p><p>flex-shrink is a ratio. If everything has the same flex-shrink (which is 1 by default), they all shrink at the same rate. <strong>That doesn’t mean they all shrink to the same size or by the same amount</strong>, but they all shrink at the same rate.</p><p>If we jump back into Firefox DevTools, we can see the base size, the flex-shrink and the final size. In this case, the two 300px elements are now 150px, and the 600px one is now 300px.</p><p>&nbsp;</p><p>&nbsp;</p><p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215047836_image-1.png?resize=849%2C710&amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215047836_image-1.png?w=849&amp;ssl=1 849w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215047836_image-1.png?resize=300%2C251&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215047836_image-1.png?resize=768%2C642&amp;ssl=1 768w\" sizes=\"100vw\" width=\"849\">The two elements that have a base width of&nbsp;300px&nbsp;become&nbsp;150px.</p><p>&nbsp;</p><p>&nbsp;</p><p><img src=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215064744_image.png?resize=846%2C698&amp;ssl=1\" alt=\"\" srcset=\"https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215064744_image.png?w=846&amp;ssl=1 846w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215064744_image.png?resize=300%2C248&amp;ssl=1 300w, https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/06/s_1892609E7C85427425C71257B0B2EE5E49AECF3D7269C5FAE0F963DD3F719B38_1622215064744_image.png?resize=768%2C634&amp;ssl=1 768w\" sizes=\"100vw\" width=\"846\"></p><p>&nbsp;</p><p>The larger element with a base width of&nbsp;600px&nbsp;becomes&nbsp;300px.</p><p>If we add up all the base sizes of all three flex items (the actual widths we declared on them), the total comes out to 1200px. Our flex container is 600px wide. If we divide everything by 2, it fits! <strong>They are all shrinking by the same rate, dividing their own widths by 2</strong>.</p><p>It’s not often that we have nice round numbers like that in the real world, but I think this does a nice job illustrating how flexbox does what it does when figuring out how big to make things.</p></blockquote>",
      "category": "Flex -Column",
      "createAt": "Sun Jun 12 2022 04:58:08 GMT+0700 (Giờ Đông Dương)"
    }
  ],
  "category":[
    {
      "id": 1,
      "title": "Dasboard",
      "img": "https://s3.amazonaws.com/creativetim_bucket/products/50/original/material-dashboard.jpg?1634648873"
    },
    {
      "id": 2,
      "title": "Typography",
      "img": "https://img.freepik.com/free-vector/editable-text-effect-modern-3d-creative-minimal-font-style_314614-1151.jpg?w=2000"
    }
  ]
}